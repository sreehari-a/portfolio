{"version":3,"file":"static/js/366.ccdbb952.chunk.js","mappings":"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","sources":["HomePage/tabs/Experience/experience.js","HomePage/tabs/Experience/styles.js","HomePage/tabs/About/index.js","HomePage/tabs/About/styles.js","components/Property/index.js","components/Property/styles.js","HomePage/tabs/Contact/index.js","HomePage/tabs/Contact/styles.js","HomePage/constants.js","HomePage/reducer.js","HomePage/saga.js","App/constants.ts","components/Tab/index.js","components/Tab/styles.js","HomePage/index.js","HomePage/styles.js","utils/checkStore.js","utils/reducerInjectors.js","utils/injectReducer.js","utils/constants.js","utils/sagaInjectors.js","utils/injectSaga.js"],"sourcesContent":["import React from \"react\";\r\nimport stylize from \"../../../utils/stylize\";\r\nimport styles from \"./styles\";\r\n\r\nfunction getPropString(prop, classes) {\r\n  let returnValue = \"\";\r\n  for (let key in prop) {\r\n    returnValue = `${returnValue} ${key}={${prop[key]}}`;\r\n  }\r\n  return <span className={classes.propView}>{returnValue}</span>;\r\n}\r\n\r\nfunction ExperienceView({ experiences,classes }) {\r\n  return experiences.map((exp) => (\r\n    <div className={classes.componentView}>\r\n      {(exp.children && (\r\n        <>\r\n          <div>{`<${exp.title}`}{getPropString(exp.props, classes)}{'>'}</div>\r\n          <ExperienceView experiences={exp.children} classes={classes} />\r\n          <div>{`</${exp.title}>`}</div>\r\n        </>\r\n      )) ||\r\n      <div>{`<${exp.title}`}{getPropString(exp.props, classes)}{' />'}</div>}\r\n    </div>\r\n  ));\r\n}\r\nexport default stylize(ExperienceView, styles);\r\n","export default function styles() {\r\n  return {\r\n    propView: {\r\n      color: \"#ffeb00\",\r\n    },\r\n    componentView: {\r\n      color: \"#ff6a19\",\r\n      paddingLeft: \"20px\",\r\n      fontSize: \"1.5rem\",\r\n      animationDuration: '2s',\r\n      animationName: '$animatePop',\r\n      animationTimingFunction: 'cubic-bezier(.26, .53, .74, 1.48)',\r\n    },\r\n    \r\n    '@keyframes animatePop': {\r\n      '0%': {\r\n        opacity: 0,\r\n        transform: 'scale(0.5, 0.5)',\r\n      },\r\n\r\n      '100%': {\r\n        opacity: 1,\r\n        transform: 'scale(1, 1)',\r\n      },\r\n    },\r\n  };\r\n}\r\n","import React from \"react\";\r\nimport stylize from \"../../../utils/stylize\";\r\nimport styles from \"./styles\";\r\nconst aboutText =\r\n  \"Passionate frontend developer based in Kerala, India. This page intends to highlight my skills and to showcase some of my intresting experiments. Currently in its starting phase but gradually will add new features\";\r\nfunction AboutTab(props) {\r\n  const [aboutTextArray] = React.useState(aboutText.split(\" \"));\r\n  return (\r\n    <div className={props.classes.container}>\r\n      {aboutTextArray.map((word, index) => (\r\n        <span\r\n          style={{ animationDelay: `${(0.05 *(index + 1))}s` }}\r\n        >{`${word} `}</span>\r\n      ))}\r\n    </div>\r\n  );\r\n}\r\nexport default stylize(AboutTab, styles);\r\n","export default function styles() {\r\n  return {\r\n    container: {\r\n      whiteSpace: \"break-spaces\",\r\n      fontSize: \"1.5rem\",\r\n      color: \"#40c1d2\",\r\n      //   animation: \"$typewriter 4s steps(44) 1s 1 normal both\",\r\n      \"& >span\": {\r\n        animationDuration: \"0.8s\",\r\n        animationName: \"$fade-in\",\r\n        animationTimingFunction: \"cubic-bezier(0.11, 0, 0.5, 0)\",\r\n        animationIterationCount: 1,\r\n        animationDirection: \"normal\",\r\n        animationFillMode: \"forwards\",\r\n        animationPlayState: \"running\",\r\n        opacity: 0,\r\n        filter: \"blur(4px)\",\r\n      },\r\n    },\r\n    \"@keyframes typewriter\": {\r\n      \"0%\": { width: \"0%\" },\r\n      \"100%\": { width: \"100%\" },\r\n    },\r\n    \"@keyframes fade-in\": {\r\n      \"100%\": {\r\n        opacity: 1,\r\n        filter: \"blur(0)\",\r\n      },\r\n    },\r\n  };\r\n}\r\n","import React from \"react\";\r\nimport stylize from \"../../utils/stylize\";\r\nimport styles from \"./styles\";\r\n\r\nfunction Property(props) {\r\n  const { classes, rootClass, labelClass, valueClass } = props;\r\n  return (\r\n    <div className={`${classes.property} ${rootClass}`}>\r\n      <div className={labelClass}>{props.label}</div>\r\n      <div className={valueClass}>{props.value}</div>\r\n    </div>\r\n  );\r\n}\r\nexport default stylize(Property, styles);","export default function styles() {\r\n    return {\r\n      property: {\r\n        display: 'flex',\r\n      },\r\n    };\r\n  }\r\n  \r\n","import React from \"react\";\r\nimport stylize from \"../../../utils/stylize\";\r\nimport styles from \"./styles\";\r\nimport { PhoneTwoTone, MailTwoTone } from \"@ant-design/icons\";\r\nimport Property from \"../../../components/Property\";\r\n\r\nfunction ContactTab(props) {\r\n  const { classes } = props;\r\n  return (\r\n    <div className={classes.container}>\r\n      {/* <div className={classes.property}>\r\n        <div className={classes.label}>\r\n          <PhoneTwoTone twoToneColor={\"#40c1d2\"} />\r\n        </div>\r\n        <div className={props.classes.value}>+91 9447793460</div>\r\n      </div> */}\r\n      <Property\r\n        label={<PhoneTwoTone twoToneColor={\"#40c1d2\"} />}\r\n        value={\"+91 9447793460\"}\r\n        rootClass={classes.property}\r\n      />\r\n      <Property\r\n        label={<MailTwoTone twoToneColor={\"#40c1d2\"} />}\r\n        value={\"harisreehari1457@gmail.com\"}\r\n        rootClass={classes.property}\r\n      />\r\n      <Property\r\n        label={<MailTwoTone twoToneColor={\"#40c1d2\"} />}\r\n        value={\"harisreehari1457@gmail.com\"}\r\n        rootClass={classes.property}\r\n      />\r\n    </div>\r\n  );\r\n}\r\nexport default stylize(ContactTab, styles);\r\n","export default function styles() {\r\n    return {\r\n      container: {\r\n      },\r\n      \"@keyframes fade-in\": {\r\n        \"100%\": {\r\n          opacity: 1,\r\n          filter: \"blur(0)\",\r\n        },\r\n      },\r\n      property: {\r\n        display: 'flex',\r\n        gap: '1rem',\r\n        lineHeight: '2rem',\r\n        fontSize: '1.2rem',\r\n      },\r\n    };\r\n  }\r\n  ","/*\n * HomeConstants\n * Each action has a corresponding type, which the reducer knows and picks up on.\n * To avoid weird typos between the reducer and the actions, we save them as\n * constants here. We prefix them with 'yourproject/YourComponent' so we avoid\n * reducers accidentally picking up actions they shouldn't.\n *\n * Follow this format:\n * export const YOUR_ACTION_CONSTANT = 'yourproject/YourContainer/YOUR_ACTION_CONSTANT';\n */\nimport ExperienceView from \"./tabs/Experience/experience\";\nimport AboutTab from './tabs/About';\nimport ContactTab from \"./tabs/Contact\";\n\nexport const CHANGE_USERNAME = \"boilerplate/Home/CHANGE_USERNAME\";\n\nexport const experiences = [\n  {\n    title: \"Frontend Developer\",\n    props: {\n      experience: \"3 years\",\n    },\n    children: [\n      {\n        title: \"Web Developer\",\n        props: {\n          experience: \"3 years\",\n        },\n        children: [\n          {\n            title: \"React\",\n            props: {\n              experience: \"3 years\",\n            },\n          },\n          {\n            title: \"ReduxSaga\",\n            props: {\n              experience: \"3 years\",\n            },\n          },\n          {\n            title: \"Javascript\",\n            props: {\n              experience: \"3 years\",\n            },\n          },\n        ],\n      },\n    ],\n  },\n];\n\nexport const TabConfig = [\n  {\n    key: \"about\",\n    title: \"About\",\n    component: AboutTab,\n  },\n  {\n    key: \"experience\",\n    title: \"Experience\",\n    component: ExperienceView,\n    props: {\n      experiences,\n    },\n  },\n  {\n    key: \"contact\",\n    title: \"Contact\",\n    component: ContactTab,\n  },\n];\n","/*\n * HomeReducer\n *\n * The reducer takes care of our data. Using actions, we can\n * update our application state. To add a new action,\n * add it to the switch statement in the reducer function\n *\n */\n\nimport produce from 'immer';\nimport { CHANGE_USERNAME } from './constants';\n\n// The initial state of the App\nexport const initialState = {\n  username: '',\n};\n\n/* eslint-disable default-case, no-param-reassign */\nconst homeReducer = (state = initialState, action) =>\n  produce(state, draft => {\n    switch (action.type) {\n      case CHANGE_USERNAME:\n        // Delete prefixed '@' from the github username\n        draft.username = action.username.replace(/@/gi, '');\n        break;\n    }\n  });\n\nexport default homeReducer;\n","/**\n * Gets the repositories of the user from Github\n */\n\nimport { call, put, select, takeLatest } from 'redux-saga/effects';\nimport { LOAD_REPOS } from '../App/constants';\nimport { reposLoaded, repoLoadingError } from '../App/actions';\n\n// import request from '../../utils/request';\nimport { makeSelectUsername } from './selectors';\n\n/**\n * Github repos request/response handler\n */\nexport function* getRepos() {\n  // Select username from store\n  // const username = yield select(makeSelectUsername());\n  // const requestURL = `https://api.github.com/users/${username}/repos?type=all&sort=updated`;\n\n  // try {\n  //   // Call our request helper (see 'utils/request')\n  //   const repos = yield call(request, requestURL);\n  //   yield put(reposLoaded(repos, username));\n  // } catch (err) {\n  //   yield put(repoLoadingError(err));\n  // }\n}\n\n/**\n * Root saga manages watcher lifecycle\n */\nexport default function* githubData() {\n  // Watches for LOAD_REPOS actions and calls getRepos when one comes in.\n  // By using `takeLatest` only the result of the latest API call is applied.\n  // It returns task descriptor (just like fork) so we can continue execution\n  // It will be cancelled automatically on component unmount\n  yield takeLatest(LOAD_REPOS, getRepos);\n}\n","/*\n * AppConstants\n * Each action has a corresponding type, which the reducer knows and picks up on.\n * To avoid weird typos between the reducer and the actions, we save them as\n * constants here. We prefix them with 'yourproject/YourComponent' so we avoid\n * reducers accidentally picking up actions they shouldn't.\n *\n * Follow this format:\n * export const YOUR_ACTION_CONSTANT = 'yourproject/YourContainer/YOUR_ACTION_CONSTANT';\n */\n\nexport const LOAD_REPOS = 'boilerplate/App/LOAD_REPOS';\nexport const LOAD_REPOS_SUCCESS = 'boilerplate/App/LOAD_REPOS_SUCCESS';\nexport const LOAD_REPOS_ERROR = 'boilerplate/App/LOAD_REPOS_ERROR';\n","import React from 'react';\r\nimport { Tabs } from \"antd\";\r\nimport stylize from '../../utils/stylize';\r\nimport styles from './styles';\r\n\r\nconst { TabPane } = Tabs;\r\n\r\n\r\nfunction TabView(props) {\r\n    return (\r\n        <div className={props.classes.tabContainer}>\r\n            \r\n        <Tabs defaultActiveKey=\"1\" onChange={() => {}}>\r\n            {props.config.map(tab=>{\r\n                const TabView = tab.component;\r\n                return(\r\n                <TabPane tab={tab.title} key={tab.key}>\r\n                {(TabView && <TabView {...tab.props} />) || tab.text}\r\n              </TabPane>\r\n            )})}\r\n          </Tabs>\r\n        </div>\r\n    )\r\n}\r\nexport default stylize(TabView, styles)","export default function styles() {\n  return {\n    tabContainer: {\n      height: \"fit-content\",\n      \"& .ant-tabs-tab\": {\n        fontSize: \"1.5rem\",\n        padding: \"10px 20px\",\n        margin: 0,\n      },\n      \"& .ant-tabs\": {\n        color: \"white\",\n      },\n      \"& .ant-tabs-tab-active .ant-tabs-tab-btn\": {\n        color: \"#40c1d2\",\n      },\n    },\n  };\n}\n","/*\n * HomePage\n *\n * This is the first thing users see of our App, at the '/' route\n */\n\nimport React, { memo } from \"react\";\nimport { compose } from \"redux\";\n\nimport { useInjectReducer } from \"../utils/injectReducer\";\nimport { useInjectSaga } from \"../utils/injectSaga\";\nimport reducer from \"./reducer\";\nimport saga from \"./saga\";\nimport stylize from \"../utils/stylize\";\nimport styles from \"./styles\";\nimport { TabConfig } from \"./constants\";\nimport TabView from '../components/Tab';\n\nconst key = \"home\";\n\nexport function HomePage({ classes }) {\n  useInjectReducer({ key, reducer });\n  useInjectSaga({ key, saga });\n\n  return (\n    <div className={classes.container}>\n      <div className={classes.introductionHeader}>\n        Hi There, it's me Sreehari\n      </div>\n      <div className={classes.content}>\n        <div className={classes.profileImg}></div>\n        <div className={classes.introduction}>\n          {/* <Tabs defaultActiveKey=\"1\" onChange={() => {}}>\n            <TabPane tab=\"About\" key=\"1\">\n              <ExperienceView experiences={experiences} />\n            </TabPane>\n            <TabPane tab=\"Experience\" key=\"2\">\n              <ExperienceView experiences={experiences} />\n            </TabPane>\n            <TabPane tab=\"Contact\" key=\"3\">\n              Content of Tab Pane 3\n            </TabPane>\n          </Tabs> */}\n        <TabView config={TabConfig} />\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default compose(memo)(stylize(HomePage, styles));\n","import ProfilePhoto from \"../images/profile-photo.jpg\";\nexport default function styles() {\n  return {\n    container: {\n      color: \"#fff\",\n      width: \"100%\",\n      padding: \"10px\",\n    },\n    introductionHeader: {\n      fontSize: \"2rem\",\n      height: \"4rem\",\n      width: '520px',\n      background: \"#40c1d2\",\n      padding: \"7px 10px\",\n      color: \"#000\",\n      fontWeight: \"bold\",\n      animationDuration: '2s',\n      animationName: '$openclose',\n      animationTimingFunction: 'ease-in-out',\n      // animation: '$openclose 5s normal 1'\n    },\n    content: {\n      display: \"flex\",\n      alignItems: \"center\",\n      height: \"calc(100% - 4rem)\",\n      flex: 1,\n      gap: \"10px\",\n    },\n    profileImg: {\n      backgroundImage: `url(${ProfilePhoto})`,\n      width: \"300px\",\n      height: \"300px\",\n      borderRadius: \"50%\",\n      backgroundSize: \"cover\",\n      backgroundRepeat: \"no-repeat\",\n      backgroundPosition: \"center\",\n    },\n    introduction: {\n      padding: \"0\",\n      width: \"700px\",\n      height: \"385px\",\n    },\n    '@keyframes openclose': {\n      '0%': {\n        width: '2px',\n      },\n      '100%': {\n        width: '520px'\n      }\n    },\n  };\n}\n","import { conformsTo, isFunction, isObject } from 'lodash';\r\nimport invariant from 'invariant';\r\n\r\n/**\r\n * Validate the shape of redux store\r\n */\r\nexport default function checkStore(store) {\r\n  const shape = {\r\n    dispatch: isFunction,\r\n    subscribe: isFunction,\r\n    getState: isFunction,\r\n    replaceReducer: isFunction,\r\n    runSaga: isFunction,\r\n    injectedReducers: isObject,\r\n    injectedSagas: isObject,\r\n  };\r\n  invariant(\r\n    conformsTo(store, shape),\r\n    '(app/utils...) injectors: Expected a valid redux store',\r\n  );\r\n}\r\n","import invariant from 'invariant';\r\nimport { isEmpty, isFunction, isString } from 'lodash';\r\n\r\nimport checkStore from './checkStore';\r\nimport createReducer from '../reducers';\r\n\r\nexport function injectReducerFactory(store, isValid) {\r\n  return function injectReducer(key, reducer) {\r\n    if (!isValid) checkStore(store);\r\n\r\n    invariant(\r\n      isString(key) && !isEmpty(key) && isFunction(reducer),\r\n      '(app/utils...) injectReducer: Expected `reducer` to be a reducer function',\r\n    );\r\n\r\n    // Check `store.injectedReducers[key] === reducer` for hot reloading when a key is the same but a reducer is different\r\n    if (\r\n      Reflect.has(store.injectedReducers, key) &&\r\n      store.injectedReducers[key] === reducer\r\n    )\r\n      return;\r\n\r\n    store.injectedReducers[key] = reducer; // eslint-disable-line no-param-reassign\r\n    store.replaceReducer(createReducer(store.injectedReducers));\r\n  };\r\n}\r\n\r\nexport default function getInjectors(store) {\r\n  checkStore(store);\r\n\r\n  return {\r\n    injectReducer: injectReducerFactory(store, true),\r\n  };\r\n}\r\n","import React from 'react';\r\nimport hoistNonReactStatics from 'hoist-non-react-statics';\r\nimport { ReactReduxContext } from 'react-redux';\r\n\r\nimport getInjectors from './reducerInjectors';\r\n\r\n/**\r\n * Dynamically injects a reducer\r\n *\r\n * @param {string} key A key of the reducer\r\n * @param {function} reducer A reducer that will be injected\r\n *\r\n */\r\nexport default ({ key, reducer }) => WrappedComponent => {\r\n  class ReducerInjector extends React.Component {\r\n    static WrappedComponent = WrappedComponent;\r\n\r\n    static contextType = ReactReduxContext;\r\n\r\n    static displayName = `withReducer(${WrappedComponent.displayName ||\r\n      WrappedComponent.name ||\r\n      'Component'})`;\r\n\r\n    constructor(props, context) {\r\n      super(props, context);\r\n\r\n      getInjectors(context.store).injectReducer(key, reducer);\r\n    }\r\n\r\n    render() {\r\n      return <WrappedComponent {...this.props} />;\r\n    }\r\n  }\r\n\r\n  return hoistNonReactStatics(ReducerInjector, WrappedComponent);\r\n};\r\n\r\nconst useInjectReducer = ({ key, reducer }) => {\r\n  const context = React.useContext(ReactReduxContext);\r\n  React.useEffect(() => {\r\n    getInjectors(context.store).injectReducer(key, reducer);\r\n  }, []);\r\n};\r\n\r\nexport { useInjectReducer };\r\n","export const RESTART_ON_REMOUNT = '@@saga-injector/restart-on-remount';\r\nexport const DAEMON = '@@saga-injector/daemon';\r\nexport const ONCE_TILL_UNMOUNT = '@@saga-injector/once-till-unmount';\r\n","import invariant from 'invariant';\r\nimport { isEmpty, isFunction, isString, conformsTo } from 'lodash';\r\n\r\nimport checkStore from './checkStore';\r\nimport { DAEMON, ONCE_TILL_UNMOUNT, RESTART_ON_REMOUNT } from './constants';\r\n\r\nconst allowedModes = [RESTART_ON_REMOUNT, DAEMON, ONCE_TILL_UNMOUNT];\r\n\r\nconst checkKey = key =>\r\n  invariant(\r\n    isString(key) && !isEmpty(key),\r\n    '(app/utils...) injectSaga: Expected `key` to be a non empty string',\r\n  );\r\n\r\nconst checkDescriptor = descriptor => {\r\n  const shape = {\r\n    saga: isFunction,\r\n    mode: mode => isString(mode) && allowedModes.includes(mode),\r\n  };\r\n  invariant(\r\n    conformsTo(descriptor, shape),\r\n    '(app/utils...) injectSaga: Expected a valid saga descriptor',\r\n  );\r\n};\r\n\r\nexport function injectSagaFactory(store, isValid) {\r\n  return function injectSaga(key, descriptor = {}, args) {\r\n    if (!isValid) checkStore(store);\r\n\r\n    const newDescriptor = {\r\n      ...descriptor,\r\n      mode: descriptor.mode || DAEMON,\r\n    };\r\n    const { saga, mode } = newDescriptor;\r\n\r\n    checkKey(key);\r\n    checkDescriptor(newDescriptor);\r\n\r\n    let hasSaga = Reflect.has(store.injectedSagas, key);\r\n\r\n    if (process.env.NODE_ENV !== 'production') {\r\n      const oldDescriptor = store.injectedSagas[key];\r\n      // enable hot reloading of daemon and once-till-unmount sagas\r\n      if (hasSaga && oldDescriptor.saga !== saga) {\r\n        oldDescriptor.task.cancel();\r\n        hasSaga = false;\r\n      }\r\n    }\r\n\r\n    if (\r\n      !hasSaga ||\r\n      (hasSaga && mode !== DAEMON && mode !== ONCE_TILL_UNMOUNT)\r\n    ) {\r\n      /* eslint-disable no-param-reassign */\r\n      store.injectedSagas[key] = {\r\n        ...newDescriptor,\r\n        task: store.runSaga(saga, args),\r\n      };\r\n      /* eslint-enable no-param-reassign */\r\n    }\r\n  };\r\n}\r\n\r\nexport function ejectSagaFactory(store, isValid) {\r\n  return function ejectSaga(key) {\r\n    if (!isValid) checkStore(store);\r\n\r\n    checkKey(key);\r\n\r\n    if (Reflect.has(store.injectedSagas, key)) {\r\n      const descriptor = store.injectedSagas[key];\r\n      if (descriptor.mode && descriptor.mode !== DAEMON) {\r\n        descriptor.task.cancel();\r\n        // Clean up in production; in development we need `descriptor.saga` for hot reloading\r\n        if (process.env.NODE_ENV === 'production') {\r\n          // Need some value to be able to detect `ONCE_TILL_UNMOUNT` sagas in `injectSaga`\r\n          store.injectedSagas[key] = 'done'; // eslint-disable-line no-param-reassign\r\n        }\r\n      }\r\n    }\r\n  };\r\n}\r\n\r\nexport default function getInjectors(store) {\r\n  checkStore(store);\r\n\r\n  return {\r\n    injectSaga: injectSagaFactory(store, true),\r\n    ejectSaga: ejectSagaFactory(store, true),\r\n  };\r\n}\r\n","import React from 'react';\r\nimport hoistNonReactStatics from 'hoist-non-react-statics';\r\nimport { ReactReduxContext } from 'react-redux';\r\n\r\nimport getInjectors from './sagaInjectors';\r\n\r\n/**\r\n * Dynamically injects a saga, passes component's props as saga arguments\r\n *\r\n * @param {string} key A key of the saga\r\n * @param {function} saga A root saga that will be injected\r\n * @param {string} [mode] By default (constants.DAEMON) the saga will be started\r\n * on component mount and never canceled or started again. Another two options:\r\n *   - constants.RESTART_ON_REMOUNT — the saga will be started on component mount and\r\n *   cancelled with `task.cancel()` on component unmount for improved performance,\r\n *   - constants.ONCE_TILL_UNMOUNT — behaves like 'RESTART_ON_REMOUNT' but never runs it again.\r\n *\r\n */\r\nexport default ({ key, saga, mode }) => WrappedComponent => {\r\n  class InjectSaga extends React.Component {\r\n    static WrappedComponent = WrappedComponent;\r\n\r\n    static contextType = ReactReduxContext;\r\n\r\n    static displayName = `withSaga(${WrappedComponent.displayName ||\r\n      WrappedComponent.name ||\r\n      'Component'})`;\r\n\r\n    constructor(props, context) {\r\n      super(props, context);\r\n\r\n      this.injectors = getInjectors(context.store);\r\n\r\n      this.injectors.injectSaga(key, { saga, mode }, this.props);\r\n    }\r\n\r\n    componentWillUnmount() {\r\n      this.injectors.ejectSaga(key);\r\n    }\r\n\r\n    render() {\r\n      return <WrappedComponent {...this.props} />;\r\n    }\r\n  }\r\n\r\n  return hoistNonReactStatics(InjectSaga, WrappedComponent);\r\n};\r\n\r\nconst useInjectSaga = ({ key, saga, mode }) => {\r\n  const context = React.useContext(ReactReduxContext);\r\n  React.useEffect(() => {\r\n    const injectors = getInjectors(context.store);\r\n    injectors.injectSaga(key, { saga, mode });\r\n\r\n    return () => {\r\n      injectors.ejectSaga(key);\r\n    };\r\n  }, []);\r\n};\r\n\r\nexport { useInjectSaga };\r\n"],"names":["getPropString","prop","classes","returnValue","key","className","propView","stylize","ExperienceView","experiences","map","exp","componentView","children","title","props","color","paddingLeft","fontSize","animationDuration","animationName","animationTimingFunction","opacity","transform","React","split","aboutTextArray","container","word","index","style","animationDelay","whiteSpace","animationIterationCount","animationDirection","animationFillMode","animationPlayState","filter","width","rootClass","labelClass","valueClass","property","label","value","display","PhoneTwoTone","twoToneColor","MailTwoTone","gap","lineHeight","CHANGE_USERNAME","TabConfig","component","AboutTab","experience","ContactTab","initialState","username","state","action","produce","draft","type","replace","getRepos","githubData","takeLatest","TabPane","Tabs","tabContainer","defaultActiveKey","onChange","config","tab","TabView","text","height","padding","margin","HomePage","useInjectReducer","reducer","useInjectSaga","saga","introductionHeader","content","profileImg","introduction","Tab","compose","memo","background","fontWeight","alignItems","flex","backgroundImage","ProfilePhoto","borderRadius","backgroundSize","backgroundRepeat","backgroundPosition","checkStore","store","shape","dispatch","isFunction","subscribe","getState","replaceReducer","runSaga","injectedReducers","isObject","injectedSagas","invariant","conformsTo","injectReducerFactory","isValid","isString","isEmpty","Reflect","has","createReducer","context","ReactReduxContext","injectReducer","DAEMON","ONCE_TILL_UNMOUNT","allowedModes","checkKey","checkDescriptor","descriptor","mode","includes","injectSagaFactory","args","newDescriptor","hasSaga","task","ejectSagaFactory","cancel","injectors","injectSaga","ejectSaga"],"sourceRoot":""}